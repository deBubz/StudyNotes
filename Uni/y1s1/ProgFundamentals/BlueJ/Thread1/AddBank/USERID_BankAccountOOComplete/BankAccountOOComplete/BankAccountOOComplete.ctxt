#BlueJ class context
comment0.target=BankAccountOOComplete
comment0.text=\n\ This\ Object-Oriented"\ version\ of\ the\ "BankAccount"\ class\n\ is\ a\ simple\ introduction\ to\ Constructors\ /\ \n\ private\ data\ members\ /\ static\ vs.\ not\ static\ /\ and\ the\n\ "toString"\ method.\ \n\ \n\ SKELETON\ FOR\ LAB\ TEST.\n\ \n\ @author\ Raymond\ Lister\n\ @version\ September\ 2015;\n
comment1.params=num\ name
comment1.target=BankAccountOOComplete(int,\ java.lang.String)
comment1.text=\n\ @param\ \ \ \ num\ \ number\ for\ the\ account\n\ @param\ \ \ \ name\ name\ of\ the\ account\n
comment10.params=newInterest
comment10.target=void\ setInterestRate(double)
comment10.text=\n\ @param\ \ \ newInterest\ \ \ \ The\ new\ interest\ rate\ \n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\n\ It\ is\ common\ practise\ to\ supply\ a\ "toString"\ method\ \n\ in\ an\ object-oriented\ class.\ \ In\ fact,\ if\ you\ don't\ \n\ explicitly\ supply\ such\ a\ method,\ Java\ produces\ an\ \n\ implicit,\ simplistic\ "toString"\ method\ which\ produces\n\ a\ String\ like\ "BankAccountOO@1edd1f0".\ The\ word\ before\ \n\ the\ "@"\ is\ the\ name\ of\ the\ class.\ The\ hexadecimal\ \n\ number\ after\ the\ "@"\ is\ called\ the\ objects\ "hash\ code".\ \n\ \n\ See\ Nielsen,\ page\ \ 78,\n\ \ \ \ \ \ \ \ \ \ section\ "5.2.4\ The\ toString\ Method"\n\ See\ Nielsen,\ page\ 165,\n\ \ \ \ \ \ \ \ \ \ section\ "8.2.1\ Overriding\ the\ toString\ Method"\n\ \n@return\ \ \ The\ state\ of\ this\ "instance\ of\ class\ BankAccount"\ or\ "object",\ the\ accountNumber,\ accountName\ and\ balance\ \ \n
comment2.params=num\ name\ bal
comment2.target=BankAccountOOComplete(int,\ java.lang.String,\ double)
comment2.text=\n\ @param\ \ \ \ num\ \ \ \ number\ for\ the\ account\n\ @param\ \ \ \ name\ \ \ name\ of\ the\ account\n\ @param\ \ \ \ bal\ \ \ \ opening\ balance\n
comment3.params=
comment3.target=int\ getAccountNumber()
comment3.text=\n\ @return\ \ \ \ \ The\ account\ number\ \n
comment4.params=
comment4.target=java.lang.String\ getAccountName()
comment4.text=\n\ @return\ \ \ The\ name\ for\ the\ account\ \n
comment5.params=newN
comment5.target=void\ setAccountName(java.lang.String)
comment5.text=\n\ @param\ \ \ newName\ The\ new\ name\ for\ the\ account\ \n
comment6.params=
comment6.target=double\ getBalance()
comment6.text=\n\ @return\ \ \ \ \ The\ account\ balance\ \n
comment7.params=amt
comment7.target=void\ deposit(double)
comment7.text=\n\ @param\ \ \ amount\ \ To\ be\ added\ to\ the\ balance\n
comment8.params=amt
comment8.target=double\ withdraw(double)
comment8.text=\n\ The\ withdrawal\ should\ be\ refused\ if\ the\ withdrawal\n\ would\ result\ in\ a\ negative\ balance.\n\ \n\ @param\ \ \ amount\ \ The\ amount\ to\ be\ withdrawn\n\n\ @return\ \ new\ balance\ or\ -1.0\ if\ withdrawal\ refused\n
comment9.params=
comment9.target=double\ getInterestRate()
comment9.text=\n\ @return\ \ \ The\ interest\ rate\ \n
numComments=12
